<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Question extends \App\Entity\Question implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'Libelle_Question', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'Experience', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'Point_Gagne', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'IsTournoi', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'reponses', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'questionnaires', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'tournois', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'position'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'Libelle_Question', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'Experience', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'Point_Gagne', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'IsTournoi', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'reponses', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'questionnaires', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'tournois', '' . "\0" . 'App\\Entity\\Question' . "\0" . 'position'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Question $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getLibelleQuestion(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLibelleQuestion', []);

        return parent::getLibelleQuestion();
    }

    /**
     * {@inheritDoc}
     */
    public function setLibelleQuestion(string $Libelle_Question): \App\Entity\Question
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLibelleQuestion', [$Libelle_Question]);

        return parent::setLibelleQuestion($Libelle_Question);
    }

    /**
     * {@inheritDoc}
     */
    public function getExperience(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExperience', []);

        return parent::getExperience();
    }

    /**
     * {@inheritDoc}
     */
    public function setExperience(?int $Experience): \App\Entity\Question
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExperience', [$Experience]);

        return parent::setExperience($Experience);
    }

    /**
     * {@inheritDoc}
     */
    public function getPointGagne(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPointGagne', []);

        return parent::getPointGagne();
    }

    /**
     * {@inheritDoc}
     */
    public function setPointGagne(?int $Point_Gagne): \App\Entity\Question
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPointGagne', [$Point_Gagne]);

        return parent::setPointGagne($Point_Gagne);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsTournoi(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsTournoi', []);

        return parent::getIsTournoi();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsTournoi(bool $IsTournoi): \App\Entity\Question
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsTournoi', [$IsTournoi]);

        return parent::setIsTournoi($IsTournoi);
    }

    /**
     * {@inheritDoc}
     */
    public function getReponses(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReponses', []);

        return parent::getReponses();
    }

    /**
     * {@inheritDoc}
     */
    public function addReponse(\App\Entity\Reponse $reponse): \App\Entity\Question
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addReponse', [$reponse]);

        return parent::addReponse($reponse);
    }

    /**
     * {@inheritDoc}
     */
    public function removeReponse(\App\Entity\Reponse $reponse): \App\Entity\Question
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeReponse', [$reponse]);

        return parent::removeReponse($reponse);
    }

    /**
     * {@inheritDoc}
     */
    public function getQuestionnaires(): ?\App\Entity\Questionnaire
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuestionnaires', []);

        return parent::getQuestionnaires();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuestionnaires(?\App\Entity\Questionnaire $questionnaires): \App\Entity\Question
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuestionnaires', [$questionnaires]);

        return parent::setQuestionnaires($questionnaires);
    }

    /**
     * {@inheritDoc}
     */
    public function getTournois(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTournois', []);

        return parent::getTournois();
    }

    /**
     * {@inheritDoc}
     */
    public function addTournois(\App\Entity\Tournoi $tournois): \App\Entity\Question
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTournois', [$tournois]);

        return parent::addTournois($tournois);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTournois(\App\Entity\Tournoi $tournois): \App\Entity\Question
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTournois', [$tournois]);

        return parent::removeTournois($tournois);
    }

    /**
     * {@inheritDoc}
     */
    public function getPosition(): ?\App\Entity\Position
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPosition', []);

        return parent::getPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function setPosition(?\App\Entity\Position $position): \App\Entity\Question
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPosition', [$position]);

        return parent::setPosition($position);
    }

}
